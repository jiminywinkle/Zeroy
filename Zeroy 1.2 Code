'''
*********************************************************************************
                                      Zeroy
                                       1.2
*********************************************************************************
'''
def rules():
    print('*'*25,'\n')
    print('Welcome to Zeroy 1.2!. Zeroy is a dungeon crawler where you have to try to make it as far as you can. The game has no end.\n')
    print('The game takes place in the fictional dimension of Zeroy, a warped void between worlds. Powered by a chaotic energy,')
    print('the void creates fighters (you) to battle endlessly with the spawn of the worlds that are interconnected with Zeroy to keep reality from imploding.\n')
    print('Eras, places, and people all collide in this epic journey.')
    print('Most dialogue that looks randomly generated, even weird fantasy words, ARE randomly generated to add to the experience!')
    print('You can currently encounter shops, leveling fountains, and, of course, enemies.')
    print('*'*25)
    print('Your character posseses 9 traits:')
    print('Health: self explanatory. Heals fully at fountains if health is upgraded.')
    print('Damage: the damage you deal to enemies minus their defense.')
    print('Defense: your ability to block attacks. Taking a hit removes 1 from your defense.')
    print('Accuracy: your added chance of landing hits on enemies. Speed of the enemy occassionally affects your chance of missing.')
    print('Speed: your added chance of attacking first in a fight. Also increases your chance of successfully running away from fights')
    print('Gold: the currency you can spend at shops.')
    print('XP: the points you use to upgrade your attributes at the fountains.')
    print('Saving Graces: instantly summon either a shop or leveling fountain. Use in dire circumstances during fights by typing in "saving grace".')
    print('Weapon: Your equipped item that adds to your other stats.\n')
    print('Shops currently always sell six items: three weapons, two potions, and a health boost (heals you for a set amount) or saving grace.\n')
    print('Using a fountain causes you to level up, which increases the difficulty of the game, but it allows you to increase your stats.\n')
    print('The game is pretty self-explanatory from there, so get going. Don\'t want to spoil too much.\n')
    print('TYPE "restart" TO RESTART DURING MOST PROMPTS')
    print('\n')
    print('*KNOWN ISSUES*\n')
    print('- General balancing')
    print('- Spawn rate of shops/fountains are still not exactly where I want them to be, but they aren\'t too bad right now.\n')
    go = input('Type any message to begin.\n')
    
import random
import math
import json
import sys
import os
os.system("mode con cols=160 lines=2000")

#random creations
def pw():
    r = random.randint(1,len(prefix_words)-1)
    return prefix_words[r]
def ww():
    r = random.randint(1,len(weapon_words)-1)
    return weapon_words[r]
def e():
    r = random.randint(1,len(exclamations)-1)
    return exclamations[r]
def dw():
    r = random.randint(1,len(damage_words)-1)
    return damage_words[r]
def mw():
    r = random.randint(1,len(monster_words)-1)
    return monster_words[r]
def mow():
    r = random.randint(1,len(movement_words)-1)
    return movement_words[r]
def plw():
    r = random.randint(1,len(place_words)-1)
    return place_words[r]
def a():
    r = random.randint(1,len(affirmations)-1)
    return affirmations[r]
def aw():
    r = random.randint(1,len(mean_words)-1)
    return mean_words[r]
def potw():
    r = random.randint(1,len(potion_words)-1)
    return potion_words[r]

def random_word():
    letters = random.randint(2,10)
    word = ''
    vowel = 'aeiou'
    consonant ='bcdfghjklmnpqrstvwxyz'
    r = random.random()
    rv = random.randint(0,4)
    rc = random.randint(0,20)
    if r > .5:
        word += vowel[rv]
    else:
        word += consonant[rc]
    letters -= 1
    while letters > 0:
        rv = random.randint(0,4)
        rc = random.randint(0,20)
        if letters % 2 == 0:
            word += vowel[rv]
        else:
            word += consonant[rc]
        letters -= 1
    return word

def create_character():
    prefix = pw()
    if prefix[0] in 'aeiou':
        print('An',prefix,'figure approaches...')
    else:
        print('A',prefix,'figure approaches...')
    name = input('What is its name?\n')
    stat_boost = 5
    health = 3
    strength = 1
    defense = 1
    accuracy = 1
    speed = 1
    sg = 1
    while stat_boost > 0:
        r = random.randint(0,4)
        if r == 0:
            health += 1
        elif r == 1:
            strength += 1
        elif r == 2:
            defense += 1
        elif r == 3:
            accuracy += 1
        else:
            speed += 1
        stat_boost -= 1
    return [name,health,strength,defense,accuracy,speed,[0,1,0,0,0,'twig',0],0,0,health,sg]

def create_potion(l):
    r = random.randint(5,l+15)
    cost = r+l
    types = ['health','strength','speed','accuracy','defense']
    r = random.randint(0,4)
    potion_type = types[r]
    namer = random.random()
    name = ''
    if namer < .2:
        name += potw()
        name += ' '
        name += potion_type
    elif namer <.5:
        name += pw()
        name += ' '
        name += potw()
        name += ' '
        name += potion_type
    elif namer <.9:
        name += potw()
        name += ' '
        name += random_word()
    else:
        name += pw()
        name += ' '
        name += potw()
        name += ' '
        name += random_word()
    r = random.randint(1,5)
    potion_value = r 
    return [name,potion_type,potion_value,cost]
            
def create_weapon(l):
    leveler = 0
    r = random.random()
    if r > .7:
        l = l
    elif r >.6:
        l += 1
    elif r>.4:
        l += 2
    elif r>.2:
        l += 3
    else:
        l += 4
    r = random.randint(5,l+15)
    cost = r+l
    namer = random.random()
    name = ''
    if namer < .2:
        name += ww()
    else:
        name += pw()
        name += ' '
        name += ww()
    namer = random.random()
    if namer < .2:
        name += ' of'
        name += ' '
        name += random_word()
    stat_boost = l
    health = 0
    strength = 1
    defense = 0
    accuracy = 0
    speed = 0
    while stat_boost > 0:
        r = random.randint(0,4)
        if r == 1:
            strength += 1
        elif r == 2:
            defense += 1
        elif r == 3:
            accuracy += 1
        else:
            speed += 1
        stat_boost -= 1
    return [None,strength,defense,accuracy,speed,name,l,cost]

def spawn_monster(l):
    leveler = 0
    r = random.random()
    if r > .7:
        l = l
    elif r >.6:
        l += 1
    elif r>.4:
        l += 2
    elif r>.2:
        l += 3
    else:
        l += 4
    namer = random.random()
    name = ''
    if namer <= .1:
        name = random_word()
    elif namer < .3:
        name += mw()
    else:
        name += pw()
        name += ' '
        name += mw()
    r = random.randint(1,2)
    stat_boost = l + r
    statchecker = 1
    levelchecker = l
    while statchecker == 1:
        while levelchecker > 0 and levelchecker % 10 != 0:
            levelchecker -= 1
        if levelchecker <= 0:
            statchecker -= 1
        if levelchecker % 10 == 0:
            stat_boost *= 1.5
            levelchecker -= 10
        else:
            statchecker -= 1
    health = 1
    strength = 1
    defense = 1
    accuracy = 1
    speed = 1
    while stat_boost > 0:
        r = random.randint(0,4)
        if r == 0:
            health += 1
        elif r == 1:
            strength += 1
        elif r == 2:
            defense += 1
        elif r == 3:
            accuracy += 1
        else:
            speed += 1
        stat_boost -= 1
    return [name,health,strength,defense,accuracy,speed,[0,0,0,0,0,None,0],None,None,health,l]

def spawn_shop(l):
    nae = random_word()
    print('You',mow(),plw(),'and find a shopkeeper named',nae)
    potions =[create_potion(l),create_potion(l)]
    weapons = [create_weapon(l),create_weapon(l),create_weapon(l)]
    going = 1
    while going == 1:
        go = input('Do you want to stop at the shop? (yes or no)\n')
        if go == 'yes':
            going -= 1
        elif go == 'no':
            going -= 1
        else:
            print('Please enter a real answer',aw())
    return [nae,weapons,potions,go]
    
#reference player
def name(c):
    return c[0]
def healthmax(c):
    return c[1]
def health(c):
    return c[9]
def strength(c):
    return c[2]
def defense(c):
    return c[3]
def accuracy(c):
    return c[4]
def speed(c):
    return c[5]
def weapon(c):
    return c[6]
def gold(c):
    return c[7]
def xp(c):
    return c[8]
def l(c):
    global level
    return level
def sg(c):
    return c[10]

#reference weapon
def weapon_strength(w):
    return w[1]
def weapon_defense(w):
    return w[2]
def weapon_accuracy(w):
    return w[3]
def weapon_speed(w):
    return w[4]
def weapon_name(w):
    return w[5]
def weapon_level(w):
    return w[6]
def weapon_cost(w):
    return w[7]

#display
def potion_stats(c):
    print('*'*10,'\n')
    print(c[0],'\n')
    print('*'*10)
    print('Boost value:',c[2])
    print('\n')
    print('Cost:',c[3],'\n')
def weapon_stats(c):
    print('*'*10,'\n')
    print(c[5],'\n')
    print('*Level',c[6],'weapon*')
    print('Boosts:\n')
    print('Strength:',c[1])
    print('Defense:',c[2])
    print('Accuracy:',c[3])
    print('Speed:',c[4],'\n')
    print('Cost:',c[7],'\n')
def monster_stats(c):
    print('\n')
    print('*'*10)
    print('{}\'s stats:'.format(name(c)))
    print('*'*10)
    print('Level',c[10],'monster')
    print('*'*10)
    print('- Health:',health(c),'/',healthmax(c))
    print('- Strength:',strength(c))
    print('- Defense:',defense(c))
    print('- Accuracy:',accuracy(c))
    print('- Speed:',speed(c))

def display_stats(c):
    print('\n')
    print('*'*10)
    print('{}\'s stats:'.format(name(c)))
    print('*'*10)
    print('Level',level,'hero.')
    print('*'*10)
    print('- Health:',health(c),'/',healthmax(c))
    if weapon_strength(weapon(c)) > 0:
        print('- Strength:',strength(c),'+',weapon_strength(weapon(c)))
    else:
        print('- Strength:',strength(c))
    if weapon_defense(weapon(c)) > 0:
        print('- Defense:',defense(c),'+',weapon_defense(weapon(c)))
    else:
        print('- Defense:',defense(c))
    if weapon_accuracy(weapon(c)) > 0:
        print('- Accuracy:',accuracy(c),'+',weapon_accuracy(weapon(c)))
    else:
        print('- Accuracy:',accuracy(c))
    if weapon_speed(weapon(c)) > 0:
        print('- Speed:',speed(c),'+',weapon_speed(weapon(c)))
    else:
        print('- Speed:',speed(c))
    print('*'*10)
    print('- Weapon Name:',weapon_name(weapon(c)))
    print('Level',weapon_level(weapon(c)),'weapon')
    print('*'*10)
    print('- Available XP:',xp(c))
    print('- Gold:',gold(c))
    print('- Saving Graces:',sg(c))
                  
def healmax(a,c):
    c[1] += a
def healremove(a,c):
    c[1] -= c
def heal(a,c):
    c[9] += a
    if c[9] > c[1]:
        c[9] = c[1]
def damage(a,c):
    c[9] -= a
def strengthen(a,c):
    c[2] += a
def weaken(a,c):
    c[2] -= a
    if c[2] < 0:
        c[2] = 0
def fortify(a,c):
    c[3] += a
def degrade(a,c):
    if c[6][2] > 0:
        c[6][2] -= a
    elif c[6][2] <= 0 and c[3] > 0:
        c[3] -= a
    else:
        c[3] = 0
        c[6][2] = 0
def accurize(a,c):
    c[4] += a
def blind(a,c):
    c[4] -= a
def speedup(a,c):
    c[5] += a
def slow(a,c):
    c[5] -= a
def switch_weapon(weapon,c):
    c[6] = weapon
def xpgain(a,c):
    c[8] += a
def xploss(a,c):
    c[8] -= a
def sgloss(a,c):
    c[10] -= a
def sggain(a,c):
    c[10] += a
def goldgain(a,c):
    c[7] += a
def goldloss(a,c):
    c[7] -= a
    
def goldlosscheck(a,c):
    return (c[7] - a)
    
#global variables
global alive
global fighters
global kills
global score
global you
global prefix_words
global weapon_words
global monster_words
global exclamations
global place_words
global movement_words
global affirmations
global level
global rude_words
global alive
global cont
global plays
global potion_words
global title
global shop_accumulator
global fight_accumulator
global current_room
global using_save
global event_generator
global monster
monster = None
plays = 0
you = None
current_room = ''
shop_accumulator = 0
fight_accumulator = 0
event_generator = 0
title = """
          _____                    _____                    _____                   _______               _____          
         /\    \                  /\    \                  /\    \                 /::\    \             |\    \         
        /::\    \                /::\    \                /::\    \               /::::\    \            |:\____\        
        \:::\    \              /::::\    \              /::::\    \             /::::::\    \           |::|   |        
         \:::\    \            /::::::\    \            /::::::\    \           /::::::::\    \          |::|   |        
          \:::\    \          /:::/\:::\    \          /:::/\:::\    \         /:::/~~\:::\    \         |::|   |        
           \:::\    \        /:::/__\:::\    \        /:::/__\:::\    \       /:::/    \:::\    \        |::|   |        
            \:::\    \      /::::\   \:::\    \      /::::\   \:::\    \     /:::/    / \:::\    \       |::|   |        
             \:::\    \    /::::::\   \:::\    \    /::::::\   \:::\    \   /:::/____/   \:::\____\      |::|___|______  
              \:::\    \  /:::/\:::\   \:::\    \  /:::/\:::\   \:::\____\ |:::|    |     |:::|    |     /::::::::\    \ 
_______________\:::\____\/:::/__\:::\   \:::\____\/:::/  \:::\   \:::|    ||:::|____|     |:::|    |    /::::::::::\____\\
\::::::::::::::::::/    /\:::\   \:::\   \::/    /\::/   |::::\  /:::|____| \:::\    \   /:::/    /    /:::/~~~~/~~      
 \::::::::::::::::/____/  \:::\   \:::\   \/____/  \/____|:::::\/:::/    /   \:::\    \ /:::/    /    /:::/    /         
  \:::\~~~~\~~~~~~         \:::\   \:::\    \            |:::::::::/    /     \:::\    /:::/    /    /:::/    /          
   \:::\    \               \:::\   \:::\____\           |::|\::::/    /       \:::\__/:::/    /    /:::/    /           
    \:::\    \               \:::\   \::/    /           |::| \::/____/         \::::::::/    /     \::/    /            
     \:::\    \               \:::\   \/____/            |::|  ~|                \::::::/    /       \/____/             
      \:::\    \               \:::\    \                |::|   |                 \::::/    /                            
       \:::\____\               \:::\____\               \::|   |                  \::/____/                             
        \::/    /                \::/    /                \:|   |                   ~~                                   
         \/____/                  \/____/                  \|___|                                                        

"""
score = 0
prefix_words = ['beeg','huge','large','massive','small','brown','purple','green','red','big','chunky','profound','gargantuan','normal','corpse of a','blighted','eternal',
                       'puny','simple','dumb','smart','crummy','powerful','crunchy','microscopic','one-handed','two-handed','three-handed','cold','hot','sexist','minimal wear',
                       'squishy','lumpy','round','2D','4D','short','tall','veiny','slippery','fat','emaciated','bloodshot','cracked','angry','supreme brand','well worn',
                       'sad','happy','murderous','lame','bronze','iron','black','paper','cardboard','glass','three-story tall','naked','slimy','gilded','nasty','field-tested',
                       'blank','sweaty','crazy','screaming','purple','t-posing','demonic','armor-clad','dying','newly-born','Jewish','ghastly','nondescript','prickly',
                       'ghostly','ridiculous','unfunny','burning','frozen','poisonous','unfulfilled','portable','tactical','wide','silenced','anti-air','factory new',
                       'super','starchy','clear','opaque','dumb','exploding','seething','cursed','cringey','annoying','russian','american','bosnian','lavish','battle-scarred',
                       'strategic','canadian','dead','living','australian','ukranian','mexican','lunar','space-age','prehistoric','invincible','offbeat','upset','tawdry',
                       'unbeatable','hilarious','poo-covered','leaking','dry','skinless','fat','gold','silver','bronze','obscene','titular','pagan','scientific',
                       'male','female','transgender','spiky','electrified','flaming','fuming','obese','erect','leather','cloth','bright','bald','swanky','muddled',
                       'white','beige','towering','long','technological','cyborg','weezing','gassy','ethereal','fortified','strengthened','outdated, racially insensitive depiction of a',
                       'inspiring','wild','exhilerating','master','funny','beautiful','orange','pink','magenta','schizophrenic','gucci','oddly-attractive',
                       'greasy','speedy','oily','sloppy','despicable','smelly','fresh','optimistic','depressed','3D','buff','salty', 'upside-down','flaccid',
                       'potassium-rich','emerald','ruby','jade','boosted','juiced','oozing','hard','steel','platinum','invisible','astral','Soulja Boy brand',
                       'PepsiCo sponsored','shady','untrustworthy','sly','troublesome','uranium','radioactive','violent','pacifist','buddhist','christian',
                       'daoist','hindu','grimy','vegetarian','vegan','carnivorous','unassuming','bland','default', 'NSFW', 'indescribable']
potion_words = ['bottle of','draught of','potion of','greater spell of','bottle of Gatorade flavored to','lesser draught of','lesser potion of',
                       'awesome mixture of','jungle juice of','small glass of','tall glass of','a pinch of','handful of','greatest draught of',
                       'capri sun flavored to','baby bottle of','lesser spell of','shot glass of','swig of','mug of','maximum potion of','super glass of',
                       'mega drink of','flask of','pill bottle of','elixir of','greater elixir of','lesser elixir of','jug of','chug jug of',
                       'gulp of','big gulp of','sip of','gallon of','pint of','liter of', 'a few drops of', 'a whole barrel of','vial of']
weapon_words = ['sword','gun','bow','glock','AR-15 because your character is a Democrat and can\'t tell the difference', 'spear','M4A4',
                       'bazooka','knife','butterknife','shiv','toothbrush','lightsaber','lock of Tommy Wiseau\'s hair','scimitar','AK-47','grenade','lance',
                       'rodent','midget','MP5','AWP','SCAR','club','bullpup rifle','hand wraps','rock','pencil','rolled-up newspaper','musket',
                       'fly swatter','staff','axe','guitar','slingshot','ray gun','shotgun','USP','stick','twig','branch','shield','chainsaw','vial of AIDS',
                       'pole','crutch','chair','hammer','hookblade','hook','golf club','bat','spatula','shovel','railgun','pan','shoe','gauntlets',
                       'spoon','knife','fork','pitchfork','keyboard','scissors','bottle of pills','cane','spork','nailgun','leg','arm','spine',
                       'hairbrush','trident','NERF gun','belt','sock','hand cannon','whip','flip-flops','grappling hook','jar of marmalade',
                       'fire axe','crowbar','taser','P250','quintuple-barrel shotgun','gun with a really long barrel','blunderbuss','crossbow',
                       'recurve bow','throwing daggers','steel-toed boots','brass knuckles','rake','trowel','mace','shuriuken','kunai','ranseur',
                       'cross','stake','marshmallow stick thing','garrote wire','khopesh','boxing gloves','unicorn horn','gladius','sickle',
                       'foil','rapier','zweihänder','falchion','butterfly knife','claymore','dao','odachi','estoc','hamberge','javelin','quarterstaff','paper airplane',
                       'stapler','glaive','pike','barbed wire whip','car battery','tec-9','glockinator','slab','nutcracker','six-shooter','suspiciously phallic object',
                       'spray paint can','paintbrush','fetus in a jar','MOAB','beretta','g11','phallic object','bag of flaming feces','thumb tack',
                       'propaganda poster','Nickelback cd','laser tag gun','super soaker','bouncing betty','tooth','jawbone','bayonet','clarinet','skateboard','longboard',
                       'laptop','mouse (the computer kind)','mouse (the filled-with-blood kind)','gardening hoe','oar']
monster_words = ['medusa','slime','rat','werewolf','politician','terrorist','wyvern','book','former president George Bush','goblin','troll','woman',
                        'dragon','pokemon','businessman','fly','roomba','vampire','mummy','munster','trash can','zombie','giant','shrimp','deer',
                        'activist','solicitor','murloc','elf','wolf','dire wolf','crab','bat','creeper','enderman','reaper','stalker','man','fish',
                        'bird','chicken','kaiju','sea sponge','redditor','monster','fiend','creature','nightmare','Steve','pile of goo','fast food worker',
                        'soccer mom', 'tornado','catfish','russian','insurgent','man','midget','boss','person','skeleton','spider','bastard','oni','tanuki','alien',
                        'hobo','protestor','congressman','mage','wizard','guy','girl','fetus','heart','ghost','kappa','ghast','silverfish','uwan','golem',
                        'wurm','worm','bass','falcon','eagle','ogre','knight','frenchman','liar','dj','pitbull','pop star','addict','slacker','furby','python','cobra',
                        'wormsnake','owl','vegan','vegetarian','hippie','snail','slug','reporter','journalist','jackalope','spirit','demigod','stapler','paperweight',
                        'cup of water','solicitor','doctor','comedian','coder','sweatlord','gamer','turtle','actor','cthulhu','gorgon','burger','burrito','griffin'
                        'ghoul','cockroach','centipede','flatworm','ringworm','vulture','cheese','spot of mold','flytrap','sailor','pirate','witch','lindworm',
                        'sorcerer','cat','tiger','walrus','penguin','condor','puffin','wolverine','marsupial','kangaroo','copy of MAD magazine','Todd Howard','dryad',
                        'terminator','transformer','decepticon','fitted bed sheet','elemental','pile of bananas','bee','swarm of bees','wasp','krampus','charon','centaur',
                        'ant','dinosaur','ringwraith','breakdancer','starfish','husk','viking','samurai','conquistador','soldier','ninja','captain','tarasque','drude','cyclops','bigfoot',
                        'ice cream vendor','nonthreatening NPC','member of the House of Representatives','public nuisance','vagabond','buddhist','daoist','christian','succubus','incubus',
                        'necromorph','furry','weeb','chad','virgin','hypebeast','pile of feces','poop sock','toddler','leviathan','chupacabra']
exclamations = ['Oh god','Dear me','Jesus','Look out','Jeez','Oh','Easy','Good luck','Darn','****','Get it','Well','That thing is hideous','Testicular torsion',
                       '*E1M1 starts playing*','Everyone in the vicinity looks on in horror','Don\'t touch that','Look at that','Holy mother of gym shorts',
                       'Run for the hills','I need to change my pants','Don\'t look now','*You collapse with fear*','Goodness','*Your celebration is cut short*',
                       'Save the children','You should run','This is nothing','Weaksauce','Sad','Get ready','Pull up your trousers','This enemy might be stronger than you',
                       'Cheese on crackers','Oops','Dun dun dun','*The ground quakes*','*The sun gets eclipsed*','*A powerful force approaches*', 'That\'s just unsanitary'
                       'I can\'t watch','This is terrible','Butter on toast','Bad day','This is the worst','God save the Queen','I\'m out', 'Indescribable',
                       'Bro','Hey bud','Time to fight','Look over yonder','By the pope','*I soil myself*','*Your eyes cannot believe what they are seeing', 'This might be the coolest thing I\'ve ever seen']
damage_words = ['walloped','attacked','decimated','headshotted','420 Shrekscoped','tore','whacked','hit','grinded','sat on','arm barred','kicked','sliced',
                       'cried on','shouted expletives at','said mean things to','punched','impaled','quickscoped','crane-kicked','took their repressed anger out on',
                       'broke','did nothing to','said mean things to','buried','slapped','caressed','back-handed','karate chopped','headbutted','gave AIDS to',
                       'evaporated','slaughtered','maimed','atomized','kissed','deadified','curbstomped','poked','stared coldly at','bit','wedgied','slashed', 'cucked',
                       'expressed their feelings for','failed to return the love of','cut up','decapitated','broke every bone in the body of','fatalitied','destroyed',
                       'whip nae nae\'d on','got into a Hummer and ran over','drop kicked','down b\'d','piggyback rode','leg swept','crunched','imploded',
                       'disassembled','dissociated','burnt','soaked','flattened','pulled a brutality on','landed a 999 hit combo','laser-eyed', 'pulled a sneaky on',
                       'leg-locked','tore the ears off of','knocked all of the teeth out of','ripped off all of the limbs of','eviscerated','crushed','eliminated']
place_words = ['a barn','a hobo town',' an outhouse','an abandoned shack','a forest','a crowded street','a shopping mall','a strip mall','a sub-dungeon','a crashed space shuttle',
                      'a parliament building','a small town','a small hole','a cave','an abandoned building','an alcove','an exact recreation of the White House','a game show stage',
                      'a time warp','an adjacent room','a sideroom','a bathroom','a big hole','an AA meeting','an embassy','another video game','our game design class','a third world country',
                      'a big cave','a lake','a volcano','a giant house','the Student Center','a group of people playing an exciting game of Chicken Scratch','a web forum',
                      'an 80s music video','a bathroom','a bedroom','an adjacent dorm','a McDonald\'s at exactly 1:00 A.M.','a White Castle','a salvation army store','a mountain',
                      'this game\'s code','the developer\'s pc','a 1950s diner','a basketball game','a military compound','a farm','a college campus', 'the world\'s last remaining Blockbuster',
                      'a Home Depot','a hot dog stand','an amusement park','a movie theater','a public pool','Syria','a CVS','a castle','a train','a car','a bus','a shady alleyway','Tilted Towers',
                      'a thrift store','an ice cream parlor','a speakeasy','the center of the Earth','an ant hill','the DMV','an Amazon warehouse', 'a ziggurat', 'a pyramid with a fish on it', 'a kid\'s birthday party',
                      'a pizza place', 'a park', 'Big Ben', 'a university campus']
movement_words = ['slide into','jump into','jump on','walk to','run to','jog to','teleport to','fall onto','sprint to','fight your way to','limp to','fly to',
                         'montage over to','bike over to','find a pogo stick and use it to go to','hail a cab and ride to','drive to','ride the CTA red line to','leave this place and go to',
                         'cry until a nearby monster carries you to','faint and wake up in','fall through the floor and end up in','skip a long cutscene and end up in',
                         'fight like 300 more monsters until you find','walk 500 miles until you find','daydream until you come across','hum the Batman theme until you arrive at',
                         'whine like a baby until the game moves you to','tumble into','default dance into','somersault down a slide and onto','float to','ride the river Styx to',
                         'die thrice more and end up in','complain about this game in the forums until a comment directs you to','check a walkthrough and find your way to',
                         'spin until the world converges around you, you get hit by','phase shift to','take an Uber to','take a Lyft to','unicycle over to','crabwalk over to',
                         'play a T.V. show transition and find yourself in','let the credits roll and wait until the end to find that the story continues in','dream that you end up in',
                         'sneak into','swim in a','play a boombox in front of a','disppear into a cloud of smoke and reappear in','fly in a hang glider over to','crawl on all fours over to',
                         'attack the ground, blasting through the other side of the planet, and end up in','take a break from the game, get a job, get married, get divorced, fall into alcholism, and get back into the game, only to find that you have landed in',
                         'meander off to','dropkick your way into','hitch a ride on a bird which drops you into', 'have a flashback to the time when you were at']
affirmations = ['Awesome!','Cool!','Not bad.','Good job.','Nice.','I knew you had it in ya\'.','Cool beans.','They\'re over and done with.','Wow, you showed them.',
                       'That was mean, but I am only a narrator and am not programmed to reprimand you on your horrible behavior.','Keep it up, champ.','I am afraid of you now.',
                       'That was hot.','Couldn\'t have done it better myself.','Doomguy would be proud.','You kiss your mother with those fists?','Nobody can stop you.','You didn\'t have to fight them y\'know.',
                       'Nobody can stop you, except for maybe the next guy.','Are you bored yet? I want to go home.','Another day, another massacre.','Wow, that was violent','Leaving the conscience at home for today I see.',
                       'You barely even hit them!','Don\'t worry, they weren\'t very nice anyways.','You have problems.','Keep going! You\'re almost at the end.','Clean up the mess at least.',
                       'MLG pro right here.','Best fighter in the arena.','Even I don\'t do this well usually.','You miss less hits later on I swear.','Quickly! Go through their pockets!',
                       'I love you.','They will harbor a hatred for you for the rest of their life.','You just gonna leave them there?','You woke up the whole neighborhood with that one']
mean_words = ['numbnuts','doofus','idiot','wiseguy','silly','illiterate','dummy','toilethead','troglodyte','weakling','liberal','brainlet','dingus','wiggly buddy',
              'flathead','you simpleton','wacky','dingaling','knucklehead mcspazatron','you pickle','you dunce','you juicy tangerine','big boy','you failure',
              'you single-celled organism','or I will','or I\'ll do nasty things to you','or else','you slapwhackus','or I will shut this game off','and pay better attention next time']
level = 0
plays = 0
kills = 0
alive = True
cont = True
fighters = []

#file handling
def save():
    global using_save
    if using_save:
        print('<saving...>\n')
        save_data = {}
        save_data['fighters'] = fighters
        save_data['plays'] = plays
        save_data['you'] = you
        save_data['level'] = level
        save_data['alive'] = alive
        save_data['current_room'] = current_room
        save_data['shop_accumulator'] = shop_accumulator
        save_data['fight_accumulator'] = fight_accumulator
        save_data['event_generator'] = event_generator
        save_data['monster'] = monster
        save_data['random'] = random.getstate()
        with open('zeroy_save.json', 'w') as outfile:
            json.dump(save_data, outfile, indent=1)

def apply_save():
    global fighters
    global plays
    global you
    global level
    global alive
    global shop_accumulator
    global fight_accumulator
    global current_room
    global monster
    if os.path.exists('zeroy_save.json'):
        with open('zeroy_save.json') as json_file:
            data = json.load(json_file)
            fighters = data['fighters']
            plays = data['plays']
            you = data['you']
            level = data['level']
            alive = data['alive']
            current_room = data['current_room']
            shop_accumulator = data['shop_accumulator']
            fight_accumulator = data['fight_accumulator']
            event_generator = data['event_generator']
            monster = data['monster']
            data['random'][1] = tuple(data['random'][1])
            data['random'] = tuple(data['random'])
            random.setstate(data['random'])
    else:
        save()

def write_words():
    save_data = {}
    save_data['prefix_words'] = prefix_words
    save_data['potion_words'] = potion_words
    save_data['weapon_words'] = weapon_words
    save_data['monster_words'] = monster_words
    save_data['exclamations'] = exclamations
    save_data['damage_words'] = damage_words
    save_data['place_words'] = place_words
    save_data['movement_words'] = movement_words
    save_data['affirmations'] = affirmations
    save_data['mean_words'] = mean_words
    with open('zeroy_data.json','w') as outfile:
        json.dump(save_data,outfile,indent=2)

#write all the words to the game contained in zeroy_data
if os.path.exists('zeroy_data.json'):
    with open('zeroy_data.json') as json_file:
        data = json.load(json_file)
        for array_name in data:
            if len(data[array_name]) < 1:
                crash = input("WORD LIST HAS INVALID LENGTH. EXITING...\n")
                sys.exit()
        prefix_words = data['prefix_words']
        potion_words = data['potion_words']
        weapon_words = data['weapon_words']
        monster_words = data['monster_words']
        exclamations = data['exclamations']
        damage_words = data['damage_words']
        place_words = data['place_words']
        movement_words = data['movement_words']
        affirmations = data['affirmations']
        mean_words = data['mean_words']
else:
    write_words()

#gameplay
def saving_grace(you):
    global level
    print('\n')
    print('A heavenly light shines upon your weak, feeble body...\n')
    sgloss(1,you)
    r = random.random()
    if r > .5:
        level_up(you)
    else:
        shop(level,you)
        
def purchase_potion(potion,you):
    print('\n')
    if goldlosscheck(potion[3],you) >= 0:
        if potion[1] == 'health':
            healmax(potion[2],you)
            print('Your health has increased by',potion[2])
        elif potion[1] == 'strength':
            strengthen(potion[2],you)
            print('Your strength has increased by',potion[2])
        elif potion[1] == 'defense':
            fortify(potion[2],you)
            print('Your defense has increased by',potion[2])
        elif potion[1] == 'accuracy':
            accurize(potion[2],you)
            print('Your accuracy has increased by',potion[2])
        else:
            speedup(potion[2],you)
            print('Your speed has increased by',potion[2])
        goldloss(potion[3],you)
    else:
        print('Insufficient funds.')
        
def purchase_weapon(weapon,you):
    if goldlosscheck(weapon[7],you) >= 0:
        print(weapon[5],'equipped.')
        you[6] = weapon
        goldloss(weapon[7],you)
    else:
        print('Insufficient funds.')
    
def goldgenerate(l,you):
    r = random.randint(1,3)
    money = r + l
    goldgain(money,you)
    print(name(you),'gained',money,'gold.')

def xpgenerate(l,you):
    '''
BALANCING DECISION
    r = random.randint(1,2)
    experience = r + l
    '''
    experience = 1
    xpgain(experience,you)
    print(name(you),'gained',experience,'xp')

def attack(c,a):
    r = random.randint(1,5)
    if accuracy(c)+r+weapon(c)[3] >= 1:
        r = random.random()
        if r > .5:
            if (accuracy(c)+r+weapon(c)[3])-a[5] >= 1:
                r = random.randint(0,5)
            else:
                print(name(c),'missed.')
                return
        else:
            r = random.randint(0,5)
    else:
        print(name(c),'missed.')
        return
    at = strength(c) + (weapon(c)[1])
    de = defense(a) + (weapon(a)[2])
    da = 0
    if de >= at:
        da = 1
        degrade(1,a)
    else:
        da = at-de
        degrade(1,a)
    damage(da,a)
    print(c[0],dw(),a[0],'for',da,'damage.')

def fight(l,you):
    global kills
    global alive
    global monster
    global current_room
    global using_save
    save()
    current_room = 'fight'
    print('*'*25,'\n')
    attacking = True
    if monster == None:
        monster = spawn_monster(l)
    print('You',mow(),plw(),'and find a monster\n')
    if monster[0][0] in 'aeiou':
        print(e(),', it\'s an',monster[0])
    else:
        print(e(),', it\'s a',monster[0])
    while attacking:
        display_stats(you)
        monster_stats(monster)
        runt = 1
        while runt == 1:
            run = input('Run?\n').lower()
            if run == 'saving grace':
                saving_grace(you)
                return
            elif run == 'restart':
                monster = None
                restart()
                return
            elif run == 'yes':
                r = random.randint(0,5)
                if speed(you)+r+weapon(you)[4] > 4:
                    print('You ran away successfully.')
                    monster = None
                    return
                else:
                    runt == 0
                    print('You tried to run, but failed to do so.')
                    ra = random.random()
                    if ra > .5:
                        print(monster[0],'takes advantage of the situation and attacks!')
                        attack(monster,you)
                        if health(you) <= 0:
                            attacking = False
                            alive = False
                            monster = None
                            return
                    else:
                        pass
            elif run == 'no':
                runt = 0
            else:
                print('Please enter a real answer,',aw())
        print('\n')
        print('FIGHT')
        print('\n')
        if speed(you)+weapon(you)[4] > speed(monster):
            attack(you,monster)
            if health(monster) > 0:
                attack(monster,you)
        elif speed(you)+weapon(you)[4] < speed(monster):
            attack(monster,you)
            if health(you) > 0:
                attack(you,monster)
        else:
            r = random.random()
            if r > .5:
                attack(you,monster)
                if health(monster) > 0:
                    attack(monster,you)
            else:
                attack(monster,you)
                if health(you) > 0:
                    attack(you,monster)
        save()
        if health(you) <= 0:
            attacking = False
            alive = False
            monster = None
            return
        if health(monster) <= 0:
            print(name(you),'defeated',name(monster))
            print(a())
            goldgenerate(monster[10],you)
            xpgenerate(monster[10],you)
            kills += 1
            attacking = False
            monster = None
    print('\n')

def health_boost():
    global level
    health_boost = 1 + level
    print('Health Boost\n')
    print('*'*10,'\n')
    print('Heals you for',health_boost,'damage.\n')
    cost = 10+level
    print('Cost:',cost,'\n')
    return [cost,health_boost]

def sg_boost():
    global level
    print('Saving Grace\n')
    print('*'*10,'\n')
    print('Allows you to instantly summon a shop or leveling fountain during a fight.\n')
    cost = 10+(level*2)
    print('Cost:',cost,'\n')
    return cost
              
def shop(l,you):
    global current_room
    current_room = 'shop'
    save()
    print('*'*25)
    keeper = spawn_shop(l)
    if keeper[3] == 'no':
        return
    print('{}\'s wares:'.format(keeper[0]))
    print('*'*10)
    print('Weapons')
    print('\n')
    print('1.')
    weapon_stats(keeper[1][0])
    print('2.')
    weapon_stats(keeper[1][1])
    print('3.')
    weapon_stats(keeper[1][2])
    print('\n')
    print('*'*10)
    print('Potions')
    print('4.')
    potion_stats(keeper[2][0])
    print('5.')
    potion_stats(keeper[2][1])
    print('\n')
    print('*'*10)
    print('Boosts')
    print('6.')
    print('*'*10,'\n')
    itemsix = ''
    costsix = 0
    healthboost = 0
    r = random.random()
    if r > .2:
        boost = health_boost()
        itemsix = 'h'
        healthboost = boost[1]
        costsix = boost[0]
    else:
        grace = sg_boost()
        itemsix = 's'
        costsix = grace
    shopping = 1
    stock = [1,1,1,1,1,1]
    while shopping == 1 and gold(you) > 0:
        display_stats(you)
        answer = input('Make a purchase? (yes or no)\n').lower()
        if answer == 'restart':
            restart()
            return
        elif answer == 'yes':
            purchase = input('Which item would you like to purchase? (1 through 6)\n')
            if purchase == 'restart':
                restart()
                return
            elif purchase == '1':
                if stock[0] == 1:
                    purchase_weapon(keeper[1][0],you)
                    stock[0] = 0
                else:
                    print('Sold out')
            elif purchase == '2':
                if stock[1] == 1:
                    purchase_weapon(keeper[1][1],you)
                    stock[1] = 0
                else:
                    print('Sold out')
            elif purchase == '3':
                if stock[2] == 1:
                    purchase_weapon(keeper[1][2],you)
                    stock[2] = 0
                else:
                    print('Sold out')
            elif purchase == '4':
                if stock[3] == 1:
                    purchase_potion(keeper[2][0],you)
                    stock[3] = 0
                else:
                    print('Sold out')
            elif purchase == '5':
                if stock[4] == 1:
                    purchase_potion(keeper[2][1],you)
                    stock[4] = 0
                else:
                    print('Sold out')
            elif purchase == '6':
                if stock[5] == 1:
                    if itemsix == 'h':
                        if goldlosscheck(costsix,you) >= 0:
                            heal(healthboost,you)
                            print('You have been healed by',healthboost)
                            goldloss(costsix,you)
                            stock[5] = 0
                        else:
                            print('Insufficient funds')
                    elif itemsix == 's':
                        if goldlosscheck(costsix,you) >= 0:
                            sggain(1,you)
                            print('You have gained 1 Saving Grace.')
                            goldloss(costsix,you)
                            stock[5] = 0
                        else:
                            print('Insufficient funds')
                else:
                    print('Sold out')
            else:
                print('Please put a real answer,',aw())
        elif answer == 'no':
            shopping -= 1
        else:
            print('Please put a real answer,',aw())
    print('\n')
    print('Thank you, come again')
    print('\n')
            
def level_up(you):
    global current_room
    current_room = 'level_up'
    save()
    print('*'*25)
    print('You come across a fountain...')
    print('You have:',xp(you),'xp to spend.')
    trying = 1
    trying2 = 1
    con = 0
    if xp(you) == 0:
        leave = input('You have no xp to spend, sad. Type anything to continue\n')
        con = 1
    while trying != 0 and xp(you) > 0:
        answer = input('Which stat would you like to upgrade?\n').lower()
        if answer == 'restart':
            restart()
            return
        elif answer == 'health':
            healmax(1,you)
            heal(healthmax(you),you)
            print('You have been fully healed.')
            print('Your maximum health has been increased by 1')
        elif answer == 'defense':
            fortify(1,you)
            print('Your defense has been increased by 1')
        elif answer == 'strength':
            strengthen(1,you)
            print('Your strength has been increased by 1')
        elif answer == 'accuracy':
            accurize(1,you)
            print('Your accuracy has been increased by 1')
        elif answer == 'speed':
            speedup(1,you)
            print('Your speed has been increased by 1')
        else:
            print('Please print a real answer,',aw(),'.')
            xpgain(1,you)
        xploss(1,you)
        display_stats(you)
        '''
BROKEN
        con = input('Contiunue upgrading? (yes or no)\n')
        while trying2 != 0:
            if con == 'yes':
                trying = 1
                trying2 = 0
            elif con == 'no':
                trying = 0
                trying2 = 0
            else:
                print('Please print a real answer,',aw(),'.')
                trying2 = 1
                '''
    if con == 0:
        global level
        level += 1
        print('\n')
        print('The ground shakes, your level increases by 1')
    go = input('Type anything to continue.\n')
    print('\n')
    print('You leave the fountain.\n')

def restart():
    print('\n')
    global alive
    print('Your head explodes.')
    alive = False
                               
def play():
    global fighters
    global kills
    global level
    global cont
    global plays
    global alive
    global title
    global monster
    global you
    global shop_accumulator
    global fight_accumulator
    global using_save
    global current_room
    global event_generator
    cont = True
    if you != None:
        if current_room == 'fight':
            fight(level,you)
        elif current_room == 'shop':
            shop(level,you)
        elif current_room == 'level_up':
            level_up(you)
        while alive:
            if fight_accumulator <= 0 and alive == True:
                if fight_accumulator < 0:
                    fight_accumulator = .5
                fight(level,you)
                fight_accumulator += .2
                shop_accumulator -= .1
                event_generator = random.random()
            elif event_generator - fight_accumulator - shop_accumulator > .5 and alive == True:
                fight(level,you)
                fight_accumulator += .1
                shop_accumulator -= .1
                event_generator = random.random()
            elif shop_accumulator <= 0 and alive == True:
                if shop_accumulator < 0:
                    shop_accumulator = .5
                r = random.random()
                if r > .6:
                    level_up(you)
                    shop_accumulator -= .1
                    fight_accumulator = 0
                    event_generator = random.random()
                else:
                    shop(level,you)
                    shop_accumulator += .2
                    fight_accumulator = 0
                    event_generator = random.random()
            elif event_generator - shop_accumulator - fight_accumulator < .3 and alive == True:
                r = random.random()
                if r > .4:
                    shop(level,you)
                    shop_accumulator += .1
                    fight_accumulator = 0
                    event_generator = random.random()
                else:
                    level_up(you)
                    shop_accumulator -= .1
                    fight_accumulator = 0
                    event_generator = random.random()
            elif alive == True:
                level_up(you)
                shop_accumulator -= .1
                fight_accumulator = 0
                event_generator = random.random()
            else:
                alive == False
        print('You lose.')
        print('You made it to level:',level)
        display_stats(you)
        print('\n')
        print('In memory of',fighters)
        print('\n')
        print('You defeated',kills,'enemies.')
        tr = 1
        you = None
        if using_save:
            save()
        while tr == 1:
            contin = input('Continue? (yes or no)\n')
            if contin == 'yes':
                cont = True
                print('\n')
                print('Good luck.\n')
                tr = 0
            elif contin == 'no':
                cont = False
                print('\n')
                print('Thanks for playing!')
                print('-Steve')
                tr = 0
            else:
                print('Please enter a real answer,',aw())
    while cont:
        print('\n'*2)
        print('*'*125)
        print('Hello, welcome to')
        print(' '*50,title)
        if plays > 0:
            print('Rebirth:',plays)
        plays += 1
        print('*'*125)
        print('\n')
        level = 0
        kills = 0
        alive = True
        you = create_character()
        fighters.append(name(you))
        save()
        event_generator = random.random()
        fight_accumulator = 0
        shop_accumulator = 0
        while alive:
            if fight_accumulator <= 0 and alive == True:
                if fight_accumulator < 0:
                    fight_accumulator = .5
                fight(level,you)
                fight_accumulator += .2
                shop_accumulator -= .1
                event_generator = random.random()
            elif event_generator - fight_accumulator - shop_accumulator > .5 and alive == True:
                fight(level,you)
                fight_accumulator += .1
                shop_accumulator -= .1
                event_generator = random.random()
            elif shop_accumulator <= 0 and alive == True:
                if shop_accumulator < 0:
                    shop_accumulator = .5
                r = random.random()
                if r > .6:
                    level_up(you)
                    shop_accumulator -= .1
                    fight_accumulator = 0
                    event_generator = random.random()
                else:
                    shop(level,you)
                    shop_accumulator += .2
                    fight_accumulator = 0
                    event_generator = random.random()
            elif event_generator - shop_accumulator - fight_accumulator < .3 and alive == True:
                r = random.random()
                if r > .4:
                    shop(level,you)
                    shop_accumulator += .1
                    fight_accumulator = 0
                    event_generator = random.random()
                else:
                    level_up(you)
                    shop_accumulator -= .1
                    fight_accumulator = 0
                    event_generator = random.random()
            elif alive == True:
                level_up(you)
                shop_accumulator -= .1
                fight_accumulator = 0
                event_generator = random.random()
            else:
                alive == False
        print('You lose.')
        print('You made it to level:',level)
        display_stats(you)
        print('\n')
        print('In memory of',fighters)
        print('\n')
        print('You defeated',kills,'enemies.')
        tr = 1
        you = None
        if using_save:
            save()
        while tr == 1:
            contin = input('Continue? (yes or no)\n')
            if contin == 'yes':
                cont = True
                print('\n')
                print('Good luck.\n')
                tr = 0
            elif contin == 'no':
                cont = False
                print('\n')
                print('Thanks for playing!')
                print('-Steve')
                tr = 0
            else:
                print('Please enter a real answer,',aw())

go = input('Do you want to learn the game first? (type "yes")\n')
if go == 'yes':
    rules()
else:
    print('\n')
using_save = input('Would you like to use the saving feature? (type "yes")\n')
if using_save.lower() == "yes":
    using_save = True
    apply_save()
else:
    using_save = False
play()
